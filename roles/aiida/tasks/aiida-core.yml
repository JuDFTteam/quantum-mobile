- name: Install DB and more
  become: true
  apt:
      name: "{{ item }}"
      state: present
  with_items:
    # Compilation
    - postgresql-9.5
    - postgresql-contrib
    - python-psycopg2
    - libpq-dev
    # RabbitMQ
    - rabbitmq-server
    # Needed for the ASE visualizer
    - python-gtk2
    # For AiiDA
    - libffi-dev
    - libssl-dev
    - graphviz

- import_tasks: postgres_sudo.yml
  when: ansible_become_method == 'sudo'

- import_tasks: postgres_su.yml
  when: ansible_become_method == 'su'

- name: Remove the aiida metapackage
  pip:
    name: "aiida"
    virtualenv: "{{ aiida_venv }}"
    state: "absent"

# get anyway the GIT code, it is often useful; checkout the same version (now actually we are forcing a different branch/tag...)
- name: Get the AiiDA code from GIT
  git:
    repo: 'https://github.com/aiidateam/aiida_core.git'
    dest: "{{ ansible_env.HOME }}/codes/aiida_core"
    version: "{{ aiida_tag }}"

- name: Make sure pip is at a recent version
  pip:
    name: "pip>=10.0.0"
    virtualenv: "{{ aiida_venv }}"

## To pass the list of extras separated by comma, you need to pass 'name' as
## a list of packages, otherwise it will convert commas as spaces
- name: "Install AiiDA from the source package"
  pip:
    name:
      - "file://{{ ansible_env.HOME }}/codes/aiida_core[{{ aiida_extras | join(',') }}]"
    editable: True
    virtualenv: "{{ aiida_venv }}"
  register: pip_install

- name: Install the aiida-ase package
  pip:
    name: "aiida-ase==1.0.1"
    virtualenv: "{{ aiida_venv }}"

- name: Install the aiida-nwchem package
  pip:
    name: "aiida-nwchem==1.0.2"
    virtualenv: "{{ aiida_venv }}"

- name: Install the aiida-codtools package
  pip:
    name: "aiida-codtools==1.0.1"
    virtualenv: "{{ aiida_venv }}"

# this might not be necessary anymore
- name: run reentry scan
  shell: "{{ aiida_venv }}/bin/reentry scan -r aiida"
  when: pip_install.changed

## PyGTK cannot be installed with pip... we need to use 
## a workaround, see https://stackoverflow.com/questions/12830662/
- name: workaround to install pygtk 2 inside the virtualenv [making dir]
  file:
    path: "{{ aiida_venv }}/lib/python2.7/dist-packages/"
    state: "directory"
    mode: 0755

- name: workaround to install pygtk 2 inside the virtualenv [creating symlinks]
  file:
    src: "/usr/lib/python2.7/dist-packages/{{ item }}"
    dest: "{{ aiida_venv }}/lib/python2.7/dist-packages/{{ item }}"
    state: link
  with_items:
    - glib
    - gobject
    - gtk-2.0
    - pygtk.pth
    - pygtk.py
    - cairo

- name: "Activate TAB completion in virtualenv"
  lineinfile: 
    path: "{{ aiida_venv }}/bin/activate"
    line: 'eval "$(verdi completioncommand)"'

- name: "Check if AiiDA has already been configured"
  stat: path="{{ ansible_env.HOME }}/.aiida/config.json"
  register: aiida_config_file

- name: "Configure AiiDA"
  # Need to use the full path because it's in a virtualenv
  shell: |
       {{ aiida_venv }}/bin/verdi setup default --non-interactive \
       --email aiida@localhost \
       --backend django \
       --db_host localhost --db_port 5432 \
       --db_name {{ aiida_postgres_db }} \
       --db_user {{ aiida_postgres_db_user }} --db_pass '{{ aiida_postgres_db_pw }}' \
       --repo {{ ansible_env.HOME }}/.aiida/repository-aiida/
  when: aiida_config_file.stat.exists == False

## I removed the when condition, it's fast enough;
## TODO: find a way to set the 'changed_when' ansible condition
- name: "Set the default AiiDA profile"
  shell: "{{ aiida_venv }}/bin/verdi profile setdefault default"

- import_role:
    name: release_notes
  vars:
    section: "AiiDA"
    option: "version"
    value: "From tag {{ aiida_tag }}"
  when: release_notes is defined and release_notes

- import_role:
    name: release_notes
  vars:
    section: "AiiDA"
    option: "usage"
    value: >-
        AiiDA is installed in a virtual environment. 
        Type 'workon aiida' to get access to the 'verdi' commands.
  when: release_notes is defined and release_notes
